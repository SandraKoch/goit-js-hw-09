{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACuBC,SAASC,cAAc,SAC/BC,UAAUC,IAAI,iBAC7B,IAOIC,EACAC,EACAC,EATEC,EAAeP,SAASC,cAAc,kBACtCO,EAAcR,SAASC,cAAc,iBACrCQ,EAAgBT,SAASC,cAAc,mBAEvCS,EAAiBV,SAASC,cAAc,mBAyB9C,SAASU,EAAcC,EAAUC,GAC/B,IAAMC,EAAc,CAClBF,WACAC,SAeF,OAbgB,IAAIE,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQF,GAERG,EAAOH,E,GAERD,E,IAtCPS,QAAQC,IAAIb,GAMZA,EAAec,iBAAiB,SAAS,SAAAC,GACvCA,EAAEC,iBACFtB,EAAauB,OAAOpB,EAAaqB,OACjCvB,EAAYsB,OAAOnB,EAAYoB,OAC/BtB,EAASqB,OAAOlB,EAAcmB,OAE9B,IAAK,IAAIC,EAAI,EAAGA,EAAIvB,EAAQuB,IAAK,CACflB,EAAckB,EAAI,EAAGzB,EAAaC,EAAYwB,GAE3DC,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBf,EAAAkC,OAAOC,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAE9DsB,OAAM,SAAAJ,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBf,EAAAkC,OAAOI,QAAQ,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst promisesFormEl = document.querySelector('.form');\npromisesFormEl.classList.add('promises-form');\nconst delayInputEl = document.querySelector('[name=\"delay\"]');\nconst stepInputEl = document.querySelector('[name=\"step\"]');\nconst amountInputEl = document.querySelector('[name=\"amount\"]');\n\nconst submitButtonEl = document.querySelector('[type=\"submit\"]');\nconsole.log(submitButtonEl);\n\nlet firstDelay;\nlet delayStep;\nlet amount;\n\nsubmitButtonEl.addEventListener('click', e => {\n  e.preventDefault();\n  firstDelay = Number(delayInputEl.value);\n  delayStep = Number(stepInputEl.value);\n  amount = Number(amountInputEl.value);\n\n  for (let i = 0; i < amount; i++) {\n    const promise = createPromise(i + 1, firstDelay + delayStep * i);\n    promise\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  const promiseData = {\n    position,\n    delay,\n  };\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(promiseData);\n      } else {\n        reject(promiseData);\n      }\n    }, delay);\n  });\n\n  //it has to return the promise in order to have an access to promiseData !\n  return promise;\n}\n"],"names":["$h6c0i","parcelRequire","document","querySelector","classList","add","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$delayInputEl","$ce04d3a99e08e73b$var$stepInputEl","$ce04d3a99e08e73b$var$amountInputEl","$ce04d3a99e08e73b$var$submitButtonEl","$ce04d3a99e08e73b$var$createPromise","position","delay","promiseData","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","addEventListener","e","preventDefault","Number","value","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.a8420571.js.map"}